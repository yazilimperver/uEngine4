name: uEngine CMake Multiplatform Github Actions Template

on: 
  push:
    branches:
      - main
    paths-ignore:
      - '**/**.md'

env:
  CMAKE_VERSION: "3.29.6"
  NINJA_VERSION: "1.12.1"

jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
         - {
            name: "Windows Latest MSVC", artifact: "Windows-MSVC",
            os: windows-latest,
            cc: "cl", cxx: "cl",
            environment_script: "C:/Program Files/Microsoft Visual Studio/2022/Enterprise/VC/Auxiliary/Build/vcvars64.bat"
          }
        #  - {
        #     name: "Ubuntu Latest GCC", artifact: "Linux",
        #     os: ubuntu-latest,
        #     cc: "gcc", cxx: "g++"
        #   }

    steps:
    - uses: actions/checkout@v4

    - name: Greeting-Windows
      if: runner.os == 'Windows'
      run: |
        echo "Yazilimperver Github Actions started from Windows!"

    - name: Greeting-Linux
      if: runner.os == 'Linux'
      run: |
        echo "Yazilimperver Github Actions started from Linux!"    

    - name: Linux Dependencies
      if: runner.os == 'Linux'
      run: |
        sudo apt install clang-tidy -y    

    - name: Download Ninja and CMake
      shell: cmake -P {0}
      run: |
        set(cmake_version $ENV{CMAKE_VERSION})
        set(ninja_version $ENV{NINJA_VERSION})

        message(STATUS "Using host CMake version: ${CMAKE_VERSION}")

        if ("${{ runner.os }}" STREQUAL "Windows")
          set(ninja_suffix "win.zip")
          set(cmake_suffix "windows-x86_64.zip")
          set(cmake_dir "cmake-${cmake_version}-windows-x86_64/bin")
        elseif ("${{ runner.os }}" STREQUAL "Linux")
          set(ninja_suffix "linux.zip")
          set(cmake_suffix "linux-x86_64.tar.gz")
          set(cmake_dir "cmake-${cmake_version}-linux-x86_64/bin")
        elseif ("${{ runner.os }}" STREQUAL "macOS")
          set(ninja_suffix "mac.zip")
          set(cmake_suffix "macos-universal.tar.gz")
          set(cmake_dir "cmake-${cmake_version}-macos-universal/CMake.app/Contents/bin")
        endif()

        set(ninja_url "https://github.com/ninja-build/ninja/releases/download/v${ninja_version}/ninja-${ninja_suffix}")
        file(DOWNLOAD "${ninja_url}" ./ninja.zip SHOW_PROGRESS)
        execute_process(COMMAND ${CMAKE_COMMAND} -E tar xvf ./ninja.zip)

        set(cmake_url "https://github.com/Kitware/CMake/releases/download/v${cmake_version}/cmake-${cmake_version}-${cmake_suffix}")
        file(DOWNLOAD "${cmake_url}" ./cmake.zip SHOW_PROGRESS)
        execute_process(COMMAND ${CMAKE_COMMAND} -E tar xvf ./cmake.zip)

        # Add to PATH environment variable
        file(TO_CMAKE_PATH "$ENV{GITHUB_WORKSPACE}/${cmake_dir}" cmake_dir)
        set(path_separator ":")
        if ("${{ runner.os }}" STREQUAL "Windows")
          set(path_separator ";")
        endif()
        file(APPEND "$ENV{GITHUB_PATH}" "$ENV{GITHUB_WORKSPACE}${path_separator}${cmake_dir}")

        if (NOT "${{ runner.os }}" STREQUAL "Windows")
          execute_process(
            COMMAND chmod +x ninja
            COMMAND chmod +x ${cmake_dir}/cmake
          )
        endif()

    - name: Download ccache
      id: ccache
      run: |
        if [ "$RUNNER_OS" == "Linux" ]; then
          sudo apt install ccache
        fi
      shell: bash
    
    - name: Install Other 3rd Party Dependencies - Linux
      id: external_libraries_linux
      if: runner.os == 'Linux'
      run: |
        chmod 700 install_for_linux.sh
        install_for_linux.sh
      shell: bash
    
    - name: Configure build for amd64
      if: runner.os == 'Windows'
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: amd64

    - name: Install Other 3rd Party Dependencies - Windows
      id: external_libraries_win
      if: runner.os == 'Windows'
      run: |
        install_for_windows.bat
      shell: cmd
    
    - name: Build uEngine4 Linux
      id: build_uengine4_linux
      if: runner.os == 'Linux'
      run: |
        git submodule update --init --recursive
        cd code
        chmod 700 ./scripts/buildLinux.sh
        ./scripts/buildLinux.sh
      shell: bash      
    
    - name: VcPkg Installation
      if: runner.os == 'Windows'
      run: |
        git clone https://github.com/microsoft/vcpkg.git
        cd vcpkg
        bootstrap-vcpkg.bat
        vcpkg integrate install
        vcpkg install opengl glew --triplet=x64-windows-static

    - name: Build uEngine4 Windows
      id: build_uengine4_windows
      if: runner.os == 'Windows'
      run: |
        git submodule update --init --recursive
        cd code
        cmake -S . -B build_ninja -G "Ninja"
        cd build_ninja
        ninja
        cd ..
      shell: cmd
  